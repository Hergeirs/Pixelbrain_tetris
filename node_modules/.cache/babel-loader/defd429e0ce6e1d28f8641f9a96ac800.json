{"ast":null,"code":"import _toArray from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\nimport WithKeyboardSubscribe from \"../../../../InputManager/HOC/WithKeyboardSubscribe\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar Cubes =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(Cubes, _GameComponent);\n\n  function Cubes(props) {\n    var _this;\n\n    _classCallCheck(this, Cubes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cubes).call(this, props));\n    _this.offsetArray = [];\n\n    _this.rotate = function () {\n      var _this$offsetArray = _toArray(_this.offsetArray),\n          first = _this$offsetArray[0],\n          rest = _this$offsetArray.slice(1);\n\n      _this.offsetArray = [first];\n      console.log(\"rest\", rest);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rest[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var offset = _step.value;\n\n          _this.offsetArray.push(first.minus(offset).hat());\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      for (var i = 1; i < _this.components.length; ++i) {\n        _this.components[i].offset = _this.offsetArray[i - 1];\n      }\n\n      console.log(_this.components);\n    };\n\n    _this.children = [React.createElement(RigidBody, {\n      weight: 10,\n      drag: 0.5\n    })];\n\n    for (var i = 0; i < 4; ++i) {}\n\n    return _this;\n  }\n\n  _createClass(Cubes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.props.keyboardSubscribe(this, \"a\", {\n        callback: function callback() {\n          return _this2.position = _this2.position.plus(new Vector([-10, 0]));\n        }\n      });\n      this.props.keyboardSubscribe(this, \"d\", {\n        callback: function callback() {\n          return _this2.position = _this2.position.plus(new Vector([10, 0]));\n        }\n      });\n      this.props.keyboardSubscribe(this, \"w\", {\n        callback: this.rotate\n      });\n      this.offsetArray.push(new Vector());\n      this.children.push(React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      }));\n\n      for (var i = 0, length = 3; i < length; ++i) {\n        var randomOffset = this.offsetArray[randomIntFromInterval(0, this.offsetArray.length - 1)];\n\n        while (true) {\n          var offset = void 0;\n\n          switch (randomIntFromInterval(0, 3)) {\n            case 0:\n              offset = new Vector([10, 0]);\n              break;\n\n            case 1:\n              offset = new Vector([-10, 0]);\n              break;\n\n            case 2:\n              offset = new Vector([0, 10]);\n              break;\n\n            case 3:\n              offset = new Vector([0, -10]);\n              break;\n\n            default:\n              throw new Error(\"shit\");\n          }\n\n          offset = randomOffset.plus(offset);\n\n          if (!this.collision(offset)) {\n            this.children.push(React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            }));\n            this.offsetArray.push(offset);\n            break;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(Cubes.prototype), \"componentWillMount\", this).call(this);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _get(_getPrototypeOf(Cubes.prototype), \"componentDidMount\", this).call(this);\n\n      console.log(this.components);\n    }\n  }, {\n    key: \"collision\",\n    value: function collision(offset2) {\n      for (var i = 0; i < this.offsetArray.length; ++i) {\n        var offset1 = this.offsetArray[i];\n        var topLeft1 = this.position.plus(offset1);\n        var topLeft2 = this.position.plus(offset2);\n        console.log(topLeft1.vector);\n        console.log(topLeft2.vector);\n        if (topLeft1.y === topLeft2.y && topLeft2.x === topLeft1.x) return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Cubes;\n}(GameComponent);\n\nexport default WithKeyboardSubscribe(WithWorld(Cubes));","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/Resources/Games/Tetris/GameComponents/Cubes.js"],"names":["GameComponent","React","Cube","Vector","WithWorld","RigidBody","VectorUtilities","CollisionManger","WithKeyboardSubscribe","randomIntFromInterval","min","max","Math","floor","random","Cubes","props","offsetArray","rotate","first","rest","console","log","offset","push","minus","hat","i","components","length","children","createElement","weight","drag","keyboardSubscribe","callback","position","plus","name","randomOffset","Error","collision","offset2","offset1","topLeft1","topLeft2","vector","y","x"],"mappings":"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","sourcesContent":["import GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\nimport WithKeyboardSubscribe from \"../../../../InputManager/HOC/WithKeyboardSubscribe\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nclass Cubes extends GameComponent {\n  constructor(props) {\n    super(props);\n    this.children = [React.createElement(RigidBody, { weight: 10, drag: 0.5 })];\n\n    for (let i = 0; i < 4; ++i) {}\n  }\n\n  offsetArray = [];\n\n  rotate = () => {\n    const [first, ...rest] = this.offsetArray;\n    this.offsetArray = [first];\n    console.log(\"rest\", rest);\n    for (const offset of rest) {\n      this.offsetArray.push(first.minus(offset).hat());\n    }\n\n    for (let i = 1; i < this.components.length; ++i) {\n      this.components[i].offset = this.offsetArray[i - 1];\n    }\n    console.log(this.components);\n  };\n\n  componentWillMount() {\n    this.props.keyboardSubscribe(this, \"a\", {\n      callback: () => (this.position = this.position.plus(new Vector([-10, 0])))\n    });\n    this.props.keyboardSubscribe(this, \"d\", {\n      callback: () => (this.position = this.position.plus(new Vector([10, 0])))\n    });\n    this.props.keyboardSubscribe(this, \"w\", {\n      callback: this.rotate\n    });\n\n    this.offsetArray.push(new Vector());\n    this.children.push(\n      React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      })\n    );\n    for (let i = 0, length = 3; i < length; ++i) {\n      const randomOffset = this.offsetArray[\n        randomIntFromInterval(0, this.offsetArray.length - 1)\n      ];\n\n      while (true) {\n        let offset;\n\n        switch (randomIntFromInterval(0, 3)) {\n          case 0:\n            offset = new Vector([10, 0]);\n            break;\n          case 1:\n            offset = new Vector([-10, 0]);\n            break;\n          case 2:\n            offset = new Vector([0, 10]);\n            break;\n          case 3:\n            offset = new Vector([0, -10]);\n            break;\n          default:\n            throw new Error(\"shit\");\n        }\n\n        offset = randomOffset.plus(offset);\n        if (!this.collision(offset)) {\n          this.children.push(\n            React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            })\n          );\n          this.offsetArray.push(offset);\n          break;\n        }\n      }\n    }\n    super.componentWillMount();\n  }\n  componentDidMount() {\n    super.componentDidMount();\n    console.log(this.components);\n  }\n  collision(offset2) {\n    for (let i = 0; i < this.offsetArray.length; ++i) {\n      const offset1 = this.offsetArray[i];\n      const topLeft1 = this.position.plus(offset1);\n      const topLeft2 = this.position.plus(offset2);\n      console.log(topLeft1.vector);\n      console.log(topLeft2.vector);\n      if (topLeft1.y === topLeft2.y && topLeft2.x === topLeft1.x) return true;\n    }\n    return false;\n  }\n}\n\nexport default WithKeyboardSubscribe(WithWorld(Cubes));\n"]},"metadata":{},"sourceType":"module"}