{"ast":null,"code":"import _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\nimport WithKeyboardSubscribe from \"../../../../InputManager/HOC/WithKeyboardSubscribe\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar Cubes =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(Cubes, _GameComponent);\n\n  function Cubes(props) {\n    var _this;\n\n    _classCallCheck(this, Cubes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cubes).call(this, props));\n    _this.offsetArray = [];\n    _this.children = [React.createElement(RigidBody, {\n      weight: 10,\n      drag: 0.5\n    })];\n\n    for (var i = 0; i < 4; ++i) {}\n\n    return _this;\n  }\n\n  _createClass(Cubes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.props.keyboardsubscribe(this, \"a\", {\n        callback: function callback() {\n          return _this2.position = _this2.position.plus(new Vector([-10, 0]));\n        }\n      });\n      this.offsetArray.push(new Vector());\n      this.children.push(React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      }));\n\n      for (var i = 0, length = 3; i < length; ++i) {\n        var randomOffset = this.offsetArray[randomIntFromInterval(0, this.offsetArray.length - 1)];\n\n        while (true) {\n          var offset = void 0;\n\n          switch (randomIntFromInterval(0, 3)) {\n            case 0:\n              offset = new Vector([10, 0]);\n              break;\n\n            case 1:\n              offset = new Vector([-10, 0]);\n              break;\n\n            case 2:\n              offset = new Vector([0, 10]);\n              break;\n\n            case 3:\n              offset = new Vector([0, -10]);\n              break;\n\n            default:\n              throw new Error(\"shit\");\n          }\n\n          offset = randomOffset.plus(offset);\n\n          if (!this.collision(offset)) {\n            this.children.push(React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            }));\n            this.offsetArray.push(offset);\n            break;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(Cubes.prototype), \"componentWillMount\", this).call(this);\n    }\n  }, {\n    key: \"collision\",\n    value: function collision(offset2) {\n      for (var i = 0; i < this.offsetArray.length; ++i) {\n        var offset1 = this.offsetArray[i];\n        var topLeft1 = this.position.plus(offset1);\n        var topLeft2 = this.position.plus(offset2);\n        console.log(topLeft1.vector);\n        console.log(topLeft2.vector);\n        if (topLeft1.y === topLeft2.y && topLeft2.x === topLeft1.x) return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Cubes;\n}(GameComponent);\n\nexport default WithKeyboardSubscribe(WithWorld(Cubes));","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/Resources/Games/Tetris/GameComponents/Cubes.js"],"names":["GameComponent","React","Cube","Vector","WithWorld","RigidBody","VectorUtilities","CollisionManger","WithKeyboardSubscribe","randomIntFromInterval","min","max","Math","floor","random","Cubes","props","offsetArray","children","createElement","weight","drag","i","keyboardsubscribe","callback","position","plus","push","offset","length","name","randomOffset","Error","collision","offset2","offset1","topLeft1","topLeft2","console","log","vector","y","x"],"mappings":"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","sourcesContent":["import GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\nimport WithKeyboardSubscribe from \"../../../../InputManager/HOC/WithKeyboardSubscribe\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nclass Cubes extends GameComponent {\n  constructor(props) {\n    super(props);\n    this.children = [React.createElement(RigidBody, { weight: 10, drag: 0.5 })];\n\n    for (let i = 0; i < 4; ++i) {}\n  }\n\n  offsetArray = [];\n\n  componentWillMount() {\n    this.props.keyboardsubscribe(this, \"a\", {\n      callback: () => (this.position = this.position.plus(new Vector([-10, 0])))\n    });\n\n    this.offsetArray.push(new Vector());\n    this.children.push(\n      React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      })\n    );\n    for (let i = 0, length = 3; i < length; ++i) {\n      const randomOffset = this.offsetArray[\n        randomIntFromInterval(0, this.offsetArray.length - 1)\n      ];\n\n      while (true) {\n        let offset;\n\n        switch (randomIntFromInterval(0, 3)) {\n          case 0:\n            offset = new Vector([10, 0]);\n            break;\n          case 1:\n            offset = new Vector([-10, 0]);\n            break;\n          case 2:\n            offset = new Vector([0, 10]);\n            break;\n          case 3:\n            offset = new Vector([0, -10]);\n            break;\n          default:\n            throw new Error(\"shit\");\n        }\n\n        offset = randomOffset.plus(offset);\n        if (!this.collision(offset)) {\n          this.children.push(\n            React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            })\n          );\n          this.offsetArray.push(offset);\n          break;\n        }\n      }\n    }\n    super.componentWillMount();\n  }\n  collision(offset2) {\n    for (let i = 0; i < this.offsetArray.length; ++i) {\n      const offset1 = this.offsetArray[i];\n      const topLeft1 = this.position.plus(offset1);\n      const topLeft2 = this.position.plus(offset2);\n      console.log(topLeft1.vector);\n      console.log(topLeft2.vector);\n      if (topLeft1.y === topLeft2.y && topLeft2.x === topLeft1.x) return true;\n    }\n    return false;\n  }\n}\n\nexport default WithKeyboardSubscribe(WithWorld(Cubes));\n"]},"metadata":{},"sourceType":"module"}