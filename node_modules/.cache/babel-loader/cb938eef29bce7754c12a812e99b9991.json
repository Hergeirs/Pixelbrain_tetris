{"ast":null,"code":"import _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar Cubes =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(Cubes, _GameComponent);\n\n  function Cubes(props) {\n    var _this;\n\n    _classCallCheck(this, Cubes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cubes).call(this, props));\n    _this.offsetArray = [];\n    _this.children = [React.createElement(RigidBody, {\n      weight: 10,\n      drag: 0.5\n    })];\n\n    for (var i = 0; i < 4; ++i) {}\n\n    return _this;\n  }\n\n  _createClass(Cubes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.offsetArray.push(new Vector());\n      this.children.push(React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      }));\n\n      for (var i = 0, length = 3; i < length; ++i) {\n        var randomOffset = this.components[randomIntFromInterval(0, this.offsetArray.length - 1)];\n        console.log(randomOffset);\n        console.log(this.offsetArray.length);\n        console.log(randomIntFromInterval(0, this.offsetArray.length - 1));\n\n        while (true) {\n          var offset = void 0;\n\n          switch (randomIntFromInterval(0, 3)) {\n            case 0:\n              offset = new Vector([10, 0]);\n              break;\n\n            case 1:\n              offset = new Vector([-10, 0]);\n              break;\n\n            case 2:\n              offset = new Vector([0, 10]);\n              break;\n\n            case 3:\n              offset = new Vector([0, -10]);\n              break;\n\n            default:\n              throw new Error(\"shit\");\n          }\n\n          console.log(\"offset\", offset);\n          console.log(\"randomOffset\", randomOffset);\n          offset = randomOffset.plus(offset);\n\n          if (this.collision(offset)) {\n            this.children.push(React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            }));\n            break;\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(Cubes.prototype), \"componentWillMount\", this).call(this);\n    }\n  }, {\n    key: \"collision\",\n    value: function collision(offset) {\n      for (var i = 0; i < this.offsetArray.length; ++i) {\n        var offset1 = this.offsetArray[i];\n        var topLeft2 = this.position.plus(offset);\n        var topLeft1 = this.position.plus(offset1);\n        var bottomRight1 = topLeft1.plus(new Vector([10, 10]));\n        var bottomRight2 = topLeft2.plus(new Vector([10, 10]));\n        if (topLeft1.x < bottomRight2.x && bottomRight1.x > topLeft2.x && topLeft1.y < bottomRight2.y && bottomRight1.y > topLeft2.y) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"collisionDetected\",\n    value: function collisionDetected() {\n      for (var i = 2; i < this.components.length; i += 2) {\n        console.log(\"collisionDetextion\");\n        var component = this.components[i];\n        var component2 = this.components[i - 1];\n\n        if (CollisionManger.instance.collisionDetected(component.collisionZones[0], component2.collisionZones[0])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Cubes;\n}(GameComponent);\n\nexport default WithWorld(Cubes);","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/Resources/Games/Tetris/GameComponents/Cubes.js"],"names":["GameComponent","React","Cube","Vector","WithWorld","RigidBody","VectorUtilities","CollisionManger","randomIntFromInterval","min","max","Math","floor","random","Cubes","props","offsetArray","children","createElement","weight","drag","i","push","offset","length","name","randomOffset","components","console","log","Error","plus","collision","offset1","topLeft2","position","topLeft1","bottomRight1","bottomRight2","x","y","component","component2","instance","collisionDetected","collisionZones"],"mappings":"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","sourcesContent":["import GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\nimport CollisionManger from \"../../../../CollisionManager/CollisionManager\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nclass Cubes extends GameComponent {\n  constructor(props) {\n    super(props);\n    this.children = [React.createElement(RigidBody, { weight: 10, drag: 0.5 })];\n\n    for (let i = 0; i < 4; ++i) {}\n  }\n\n  offsetArray = [];\n\n  componentWillMount() {\n    this.offsetArray.push(new Vector());\n    this.children.push(\n      React.createElement(Cube, {\n        offset: this.offsetArray[this.offsetArray.length - 1],\n        name: \"Cube\"\n      })\n    );\n    for (let i = 0, length = 3; i < length; ++i) {\n      const randomOffset = this.components[\n        randomIntFromInterval(0, this.offsetArray.length - 1)\n      ];\n      console.log(randomOffset);\n      console.log(this.offsetArray.length);\n      console.log(randomIntFromInterval(0, this.offsetArray.length - 1));\n\n      while (true) {\n        let offset;\n\n        switch (randomIntFromInterval(0, 3)) {\n          case 0:\n            offset = new Vector([10, 0]);\n            break;\n          case 1:\n            offset = new Vector([-10, 0]);\n            break;\n          case 2:\n            offset = new Vector([0, 10]);\n            break;\n          case 3:\n            offset = new Vector([0, -10]);\n            break;\n          default:\n            throw new Error(\"shit\");\n        }\n        console.log(\"offset\", offset);\n        console.log(\"randomOffset\", randomOffset);\n        offset = randomOffset.plus(offset);\n        if (this.collision(offset)) {\n          this.children.push(\n            React.createElement(Cube, {\n              offset: offset,\n              name: \"Cube\"\n            })\n          );\n          break;\n        }\n      }\n    }\n    super.componentWillMount();\n  }\n  collision(offset) {\n    for (let i = 0; i < this.offsetArray.length; ++i) {\n      const offset1 = this.offsetArray[i];\n      const topLeft2 = this.position.plus(offset);\n      const topLeft1 = this.position.plus(offset1);\n      const bottomRight1 = topLeft1.plus(new Vector([10, 10]));\n      const bottomRight2 = topLeft2.plus(new Vector([10, 10]));\n\n      if (\n        topLeft1.x < bottomRight2.x &&\n        bottomRight1.x > topLeft2.x &&\n        topLeft1.y < bottomRight2.y &&\n        bottomRight1.y > topLeft2.y\n      )\n        return true;\n    }\n    return false;\n  }\n  collisionDetected() {\n    for (let i = 2; i < this.components.length; i += 2) {\n      console.log(\"collisionDetextion\");\n      const component = this.components[i];\n      const component2 = this.components[i - 1];\n      if (\n        CollisionManger.instance.collisionDetected(\n          component.collisionZones[0],\n          component2.collisionZones[0]\n        )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport default WithWorld(Cubes);\n"]},"metadata":{},"sourceType":"module"}