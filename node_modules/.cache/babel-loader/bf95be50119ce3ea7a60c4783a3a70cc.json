{"ast":null,"code":"import _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nif (typeof require.context === \"undefined\") {\n  var fs = require(\"fs\");\n\n  var path = require(\"path\");\n\n  require.context = function () {\n    var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \".\";\n    var scanSubDirectories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var regularExpression = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : /\\.js$/;\n    var files = {};\n\n    function readDirectory(directory) {\n      fs.readdirSync(directory).forEach(function (file) {\n        var fullPath = path.resolve(directory, file);\n\n        if (fs.statSync(fullPath).isDirectory()) {\n          if (scanSubDirectories) readDirectory(fullPath);\n          return;\n        }\n\n        if (!regularExpression.test(fullPath)) return;\n        files[fullPath] = true;\n      });\n    }\n\n    readDirectory(path.resolve(__dirname, base));\n\n    function Module(file) {\n      return require(file);\n    }\n\n    Module.keys = function () {\n      return Object.keys(files);\n    };\n\n    return Module;\n  };\n}\n\nvar ResourceManager =\n/*#__PURE__*/\nfunction () {\n  _createClass(ResourceManager, [{\n    key: \"importAll\",\n    value: function importAll(r) {\n      var images = {};\n      r.keys().map(function (item, index) {\n        images[item.replace(\"./\", \"\")] = r(item);\n      });\n      return images;\n    }\n  }]);\n\n  function ResourceManager(GameName) {\n    var _this = this;\n\n    _classCallCheck(this, ResourceManager);\n\n    this.getImage = function (name) {\n      return _this.images[name];\n    };\n\n    this.getAudioPath = function (index) {\n      return _this.audio[index];\n    };\n\n    this.getFont = function (font) {\n      return _this.fonts[font];\n    };\n\n    this.GameInstance = GameName;\n    var images = this.importAll(require.context(\"./../Resources/Images\", false, /\\.(png|jpe?g|svg)$/));\n    this.images = images;\n    var audio = this.importAll(require.context(\"./../Resources/sounds\", false, /\\.(wav)$/));\n    this.audio = audio;\n    var fonts = this.importAll(require.context(\"./../Resources/fonts\", false, /\\.(ttf)$/));\n    this.fonts = fonts;\n  }\n\n  return ResourceManager;\n}();\n\nexport default ResourceManager;","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/Resource Manager/Resource Manager.js"],"names":["require","context","fs","path","base","scanSubDirectories","regularExpression","files","readDirectory","directory","readdirSync","forEach","file","fullPath","resolve","statSync","isDirectory","test","__dirname","Module","keys","Object","ResourceManager","r","images","map","item","index","replace","GameName","getImage","name","getAudioPath","audio","getFont","font","fonts","GameInstance","importAll"],"mappings":"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","sourcesContent":["if (typeof require.context === \"undefined\") {\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  require.context = (\n    base = \".\",\n    scanSubDirectories = false,\n    regularExpression = /\\.js$/\n  ) => {\n    const files = {};\n\n    function readDirectory(directory) {\n      fs.readdirSync(directory).forEach(file => {\n        const fullPath = path.resolve(directory, file);\n\n        if (fs.statSync(fullPath).isDirectory()) {\n          if (scanSubDirectories) readDirectory(fullPath);\n\n          return;\n        }\n\n        if (!regularExpression.test(fullPath)) return;\n\n        files[fullPath] = true;\n      });\n    }\n\n    readDirectory(path.resolve(__dirname, base));\n\n    function Module(file) {\n      return require(file);\n    }\n\n    Module.keys = () => Object.keys(files);\n\n    return Module;\n  };\n}\n\nclass ResourceManager {\n  importAll(r) {\n    let images = {};\n    r.keys().map((item, index) => {\n      images[item.replace(\"./\", \"\")] = r(item);\n    });\n    return images;\n  }\n\n  constructor(GameName) {\n    this.GameInstance = GameName;\n\n    const images = this.importAll(\n      require.context(\"./../Resources/Images\", false, /\\.(png|jpe?g|svg)$/)\n    );\n    this.images = images;\n\n    const audio = this.importAll(\n      require.context(\"./../Resources/sounds\", false, /\\.(wav)$/)\n    );\n    this.audio = audio;\n\n    const fonts = this.importAll(\n      require.context(\"./../Resources/fonts\", false, /\\.(ttf)$/)\n    );\n\n    this.fonts = fonts;\n  }\n\n  getImage = name => {\n    return this.images[name];\n  };\n\n  getAudioPath = index => {\n    return this.audio[index];\n  };\n\n  getFont = font => {\n    return this.fonts[font];\n  };\n}\n\nexport default ResourceManager;\n"]},"metadata":{},"sourceType":"module"}