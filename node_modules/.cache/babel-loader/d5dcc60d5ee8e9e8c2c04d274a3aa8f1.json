{"ast":null,"code":"import _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Vector from \"./../Vector/Vector\";\n\nvar VectorUtilities =\n/*#__PURE__*/\nfunction () {\n  function VectorUtilities() {\n    _classCallCheck(this, VectorUtilities);\n  }\n\n  _createClass(VectorUtilities, null, [{\n    key: \"reduceVectorArray\",\n    //sums vector array with function.\n    value: function reduceVectorArray(arr) {\n      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {\n        return a.plus(b);\n      };\n      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector();\n      if (!arr || arr.length === 0) return new Vector();\n      var vector;\n\n      while (vector = arr.pop()) {\n        initial = method(vector, initial);\n      }\n\n      return initial;\n    } // multiplies vector with number\n\n  }]);\n\n  return VectorUtilities;\n}();\n\nVectorUtilities.addNumbers = function (a, b) {\n  return Number(a) + Number(b);\n};\n\nVectorUtilities.addVectors = function (vector, vector0) {\n  return vector && vector0 ? vector.map(function (val, idx) {\n    return vector0[idx] + val;\n  }) : [0, 0];\n};\n\nVectorUtilities.multiplyVector = function (vector, multiplier) {\n  return vector.map(function (value) {\n    return value * multiplier;\n  });\n};\n\nexport default VectorUtilities;","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/VectorUtilities/VectorUtilities.ts"],"names":["Vector","VectorUtilities","arr","method","a","b","plus","initial","length","vector","pop","addNumbers","Number","addVectors","vector0","map","val","idx","multiplyVector","multiplier","value"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;;IACMC,e;;;;;;;;;AAMJ;sCAEEC,G,EAGQ;AAAA,UAFRC,MAEQ,uEAFC,UAACC,CAAD,EAAYC,CAAZ;AAAA,eAA0BD,CAAC,CAACE,IAAF,CAAOD,CAAP,CAA1B;AAAA,OAED;AAAA,UADRE,OACQ,uEADU,IAAIP,MAAJ,EACV;AACR,UAAI,CAACE,GAAD,IAAQA,GAAG,CAACM,MAAJ,KAAe,CAA3B,EAA8B,OAAO,IAAIR,MAAJ,EAAP;AAC9B,UAAIS,MAAJ;;AAEA,aAAQA,MAAM,GAAGP,GAAG,CAACQ,GAAJ,EAAjB;AAA6BH,QAAAA,OAAO,GAAGJ,MAAM,CAACM,MAAD,EAASF,OAAT,CAAhB;AAA7B;;AACA,aAAOA,OAAP;AACD,K,CAED;;;;;;;AAnBIN,e,CACGU,U,GAAa,UAACP,CAAD,EAAYC,CAAZ;AAAA,SAA0BO,MAAM,CAACR,CAAD,CAAN,GAAYQ,MAAM,CAACP,CAAD,CAA5C;AAAA,C;;AADhBJ,e,CAGGY,U,GAAa,UAACJ,MAAD,EAAmBK,OAAnB;AAAA,SAClBL,MAAM,IAAIK,OAAV,GAAoBL,MAAM,CAACM,GAAP,CAAW,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcH,OAAO,CAACG,GAAD,CAAP,GAAeD,GAA7B;AAAA,GAAX,CAApB,GAAmE,CAAC,CAAD,EAAI,CAAJ,CADjD;AAAA,C;;AAHhBf,e,CAoBGiB,c,GAAiB,UAACT,MAAD,EAAmBU,UAAnB;AAAA,SACtBV,MAAM,CAACM,GAAP,CAAW,UAAAK,KAAK;AAAA,WAAIA,KAAK,GAAGD,UAAZ;AAAA,GAAhB,CADsB;AAAA,C;;AAI1B,eAAelB,eAAf","sourcesContent":["import Vector from \"./../Vector/Vector\";\nclass VectorUtilities {\n  static addNumbers = (a: string, b: string) => Number(a) + Number(b);\n\n  static addVectors = (vector: number[], vector0: number[]) =>\n    vector && vector0 ? vector.map((val, idx) => vector0[idx] + val) : [0, 0];\n\n  //sums vector array with function.\n  static reduceVectorArray(\n    arr: Array<Vector>,\n    method = (a: Vector, b: Vector) => a.plus(b),\n    initial: Vector = new Vector()\n  ): Vector {\n    if (!arr || arr.length === 0) return new Vector();\n    let vector;\n\n    while ((vector = arr.pop())) initial = method(vector, initial);\n    return initial;\n  }\n\n  // multiplies vector with number\n  static multiplyVector = (vector: number[], multiplier: number) =>\n    vector.map(value => value * multiplier);\n}\n\nexport default VectorUtilities;\n"]},"metadata":{},"sourceType":"module"}