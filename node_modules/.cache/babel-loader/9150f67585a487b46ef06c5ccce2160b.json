{"ast":null,"code":"import _classCallCheck from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/hergeirs/Setri/ForritaVerkfr\\xF8\\xF0i/Pixelbrain_tetris/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar Cubes =\n/*#__PURE__*/\nfunction (_GameComponent) {\n  _inherits(Cubes, _GameComponent);\n\n  function Cubes(props) {\n    var _this;\n\n    _classCallCheck(this, Cubes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cubes).call(this, props));\n    _this.children = [React.createElement(RigidBody, {\n      weight: 10,\n      drag: 0.5\n    })];\n\n    for (var i = 0; i < 4; ++i) {}\n\n    return _this;\n  }\n\n  _createClass(Cubes, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.children.push(React.createElement(Cube, {\n        offset: new Vector(),\n        name: \"Cube\"\n      }));\n\n      for (var i = 0, length = 3; i < length; ++i) {\n        var randomCube = this.components[randomIntFromInterval(1, this.components.length)];\n        var offset = void 0;\n\n        switch (randomIntFromInterval(0, 3)) {\n          case 0:\n            offset = new Vector([10, 0]);\n            break;\n\n          case 1:\n            offset = new Vector([-10, 0]);\n            break;\n\n          case 2:\n            offset = new Vector([0, 10]);\n            break;\n\n          case 3:\n            offset = new Vector([0, 10]);\n            break;\n\n          default:\n            throw \"shit\";\n        }\n      }\n\n      _get(_getPrototypeOf(Cubes.prototype), \"componentWillMount\", this).call(this);\n    }\n  }]);\n\n  return Cubes;\n}(GameComponent);\n\nexport default WithWorld(Cubes);","map":{"version":3,"sources":["/home/hergeirs/Setri/ForritaVerkfrøði/Pixelbrain_tetris/src/Resources/Games/Tetris/GameComponents/Cubes.js"],"names":["GameComponent","React","Cube","Vector","WithWorld","RigidBody","VectorUtilities","randomIntFromInterval","min","max","Math","floor","random","Cubes","props","children","createElement","weight","drag","i","push","offset","name","length","randomCube","components"],"mappings":";;;;;;AAAA,OAAOA,aAAP,MAA0B,sCAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,eAAP,MAA4B,6CAA5B;;AAEA,SAASC,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AACvC;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;IAEKK,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,QAAL,GAAgB,CAACd,KAAK,CAACe,aAAN,CAAoBX,SAApB,EAA+B;AAAEY,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAA/B,CAAD,CAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B,CAAE;;AAJb;AAKlB;;;;yCAEoB;AACnB,WAAKJ,QAAL,CAAcK,IAAd,CACEnB,KAAK,CAACe,aAAN,CAAoBd,IAApB,EAA0B;AACxBmB,QAAAA,MAAM,EAAE,IAAIlB,MAAJ,EADgB;AAExBmB,QAAAA,IAAI,EAAE;AAFkB,OAA1B,CADF;;AAMA,WAAK,IAAIH,CAAC,GAAG,CAAR,EAAWI,MAAM,GAAG,CAAzB,EAA4BJ,CAAC,GAAGI,MAAhC,EAAwC,EAAEJ,CAA1C,EAA6C;AAC3C,YAAMK,UAAU,GAAG,KAAKC,UAAL,CACjBlB,qBAAqB,CAAC,CAAD,EAAI,KAAKkB,UAAL,CAAgBF,MAApB,CADJ,CAAnB;AAIA,YAAIF,MAAM,SAAV;;AAEA,gBAAQd,qBAAqB,CAAC,CAAD,EAAI,CAAJ,CAA7B;AACE,eAAK,CAAL;AACEc,YAAAA,MAAM,GAAG,IAAIlB,MAAJ,CAAW,CAAC,EAAD,EAAK,CAAL,CAAX,CAAT;AACA;;AACF,eAAK,CAAL;AACEkB,YAAAA,MAAM,GAAG,IAAIlB,MAAJ,CAAW,CAAC,CAAC,EAAF,EAAM,CAAN,CAAX,CAAT;AACA;;AACF,eAAK,CAAL;AACEkB,YAAAA,MAAM,GAAG,IAAIlB,MAAJ,CAAW,CAAC,CAAD,EAAI,EAAJ,CAAX,CAAT;AACA;;AACF,eAAK,CAAL;AACEkB,YAAAA,MAAM,GAAG,IAAIlB,MAAJ,CAAW,CAAC,CAAD,EAAI,EAAJ,CAAX,CAAT;AACA;;AACF;AACE,kBAAM,MAAN;AAdJ;AAgBD;;AACD;AACD;;;;EAxCiBH,a;;AA2CpB,eAAeI,SAAS,CAACS,KAAD,CAAxB","sourcesContent":["import GameComponent from \"../../../../GameObject/GameComponent\";\nimport React from \"react\";\nimport Cube from \"./Cube\";\nimport Vector from \"../../../../Vector/Vector\";\nimport { WithWorld } from \"../../../../World/HOC/WithWorld\";\nimport RigidBody from \"../../../../GameObject/RigidBody\";\nimport VectorUtilities from \"../../../../VectorUtilities/VectorUtilities\";\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nclass Cubes extends GameComponent {\n  constructor(props) {\n    super(props);\n    this.children = [React.createElement(RigidBody, { weight: 10, drag: 0.5 })];\n\n    for (let i = 0; i < 4; ++i) {}\n  }\n\n  componentWillMount() {\n    this.children.push(\n      React.createElement(Cube, {\n        offset: new Vector(),\n        name: \"Cube\"\n      })\n    );\n    for (let i = 0, length = 3; i < length; ++i) {\n      const randomCube = this.components[\n        randomIntFromInterval(1, this.components.length)\n      ];\n\n      let offset;\n\n      switch (randomIntFromInterval(0, 3)) {\n        case 0:\n          offset = new Vector([10, 0]);\n          break;\n        case 1:\n          offset = new Vector([-10, 0]);\n          break;\n        case 2:\n          offset = new Vector([0, 10]);\n          break;\n        case 3:\n          offset = new Vector([0, 10]);\n          break;\n        default:\n          throw \"shit\";\n      }\n    }\n    super.componentWillMount();\n  }\n}\n\nexport default WithWorld(Cubes);\n"]},"metadata":{},"sourceType":"module"}